c
@user.new
        #   name: "danger"
        #   rating: 2,
        #   user_id: @user.id,     
        #   category_id: @category.id,
 movie: {
@movie.create
@movie.save
@movie.new
@category
@user
@movie
c
@review
@movie
@user
c
@review.create
@review.save
@review.new
@review
@movie
@user
c
post "/review"
post "/movie/#{@movie.id}/review/#{@review.id}"
post "/movie/#{@movie.id}/review"
post "/movie/#{@movie.id}/review
@review
@movie
@user
c
@review
@movie
@user
Uuser
c
@review
@movie
@user
c
@category.name
@category
@review.user.name
@movie.user.username
@movie.user.name
@movie.category.name
@movie.user_id
@movie.name
@category
@movie
@user
c
@movie
@user
@usee
c
@movie
@user
c
@movie
@user
c
@review
@user
@movie
c
@category.name="hollywood"
@category.new
@category
@user
@movie
c
@review.user
@user
@movie
c
@movie
user
@user
c
@movie
@user
continue
@user
@category
@review
@movie
@user
continue
@user.new
@user.name="ankit"
@review
@user
@movie
continue
@review
@movie
@user
c
@review
@movie
@user
continue
@review
@movie
@user
continue
@user
@movie
continue
@user.new
@review
@movie
@user
c
@review
@movie
@user
continue
@review
@category
@movie
@user
continue
@movie
@user
continue
@review.new
@review
@movie
@user
continue
@category
@movie
@user
@review
continue
@user
continue
@user.name
user
@user
continue
@user
continue
@user.new
@user
continue
@user.name
@user.new
@user
@user.save
@user
continue
@user.update(name: "Ankit")
@user.update
@user.update(name: "Ankit")
@user.update(name: "Ankit
@user.name="Ankit"
@user.name="Ankit:
@user.update(name: "Ankit")
@user.update
continue
@user.update
@user.name="Ankit"
@user.new
@user
c
@user.update
@user.save
@user.name="Ankit"
@user.new
@user
@user.update
@user
c
@user.save
@user
@user.password= "password"
@user.new
@user
continue
c
@user.save
@user
@user.password="password"
@user.new
@user
c
@user.save
@user
@user.password = "password"
@user.new
@user
continue
movie
user
c
movie
n
user
FactoryBot.create!(:movie)
FactoryBot.create!(movie)
continue
movie
user
c
it { should validate_uniqueness_of(:user_id).scoped_to(:movie_id) }
 should validate_uniqueness_of(:user_id).scoped_to(:movie_id) 
it { should validate_uniqueness_of(:user_id).scoped_to(:movie_id) }
continue
c
User.find(decoded[:user_id])
header
decoded
n
header
n
header
n
params
